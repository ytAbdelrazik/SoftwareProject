import { Model } from 'mongoose';
import { UpdateProgressDto } from './dtos/update-progress.dto';
import { Progress } from './progress.schema';
import { UserInteraction } from 'src/recommedation-engine/user-interaction.schema';
import { Response } from 'src/interactive-modules/responses.schema';
import { Course } from 'src/course-management/course.schema';
import { Module } from 'src/course-management/module.schema';
import { Quiz } from 'src/interactive-modules/quizzes.schema';
import { User } from 'src/user-managment/users.schema';
import { Response as ExpressResponse } from 'express';
import { Rating } from './modulerating.schema';
import { InstructorRating } from './instructorrating.schema';
export declare class PerformanceTrackingService {
    private readonly progressModel;
    private readonly userInteractionModel;
    private readonly courseModel;
    private readonly moduleModel;
    private readonly quizModel;
    private readonly responseModel;
    private readonly userModel;
    private readonly ratingModel;
    private readonly instructorRatingModel;
    constructor(progressModel: Model<Progress>, userInteractionModel: Model<UserInteraction>, courseModel: Model<Course>, moduleModel: Model<Module>, quizModel: Model<Quiz>, responseModel: Model<Response>, userModel: Model<User>, ratingModel: Model<Rating>, instructorRatingModel: Model<InstructorRating>);
    getProgressByUser(userId: string): Promise<Progress[]>;
    updateProgress(progressId: string, updateProgressDto: UpdateProgressDto): Promise<Progress>;
    private readonly logger;
    deleteProgress(progressId: string): Promise<void>;
    addRating(userId: string, courseId: string, moduleId: string | null, rating: number): Promise<Rating>;
    getAverageRatingForCourse(courseId: string): Promise<number>;
    getModuleRatings(courseId: string): Promise<any[]>;
    addInstructorRating(userId: string, instructorId: string, courseId: string, rating: number): Promise<InstructorRating>;
    getAverageRatingForInstructor(instructorId: string): Promise<number>;
    createProgress(progressDto: UpdateProgressDto): Promise<Progress>;
    getAllProgress(): Promise<Progress[]>;
    getQuizPerformanceByQuizId(quizId: string): Promise<any>;
    getStudentQuizPerformance(quizId: string, userId: string): Promise<any>;
    getStudentDashboard(studentId: string): Promise<any>;
    exportAnalytics(courseId: string, userId: string, format: string, res: ExpressResponse): Promise<void>;
    getCourseAnalytics(courseId: string): Promise<any>;
}
